
# Homework JavaScript Avanzado I

## Scope & Hoisting

Determiná que será impreso en la consola, sin ejecutar el código.

> Investiga cuál es la diferencia entre declarar una variable con `var` y directamente asignarle un valor.
Segun lo entendido, al declarar una variable var se la tiene en cuenta en todo el contexto global, en cambio crear una variable let no se trabajaria con una variable 
que se puede modificar globalmente, sino solo desde su execution context; por eso entendi que es recomnendable trabajar con variables let y const para no cometer el 
error de quiza modificar o alterar una variable de forma global con la variable var.

```javascript
x = 1;                           // 1
var a = 5;                       //
var b = 10;                      // 
var c = function(a, b, c) {      // 
  var x = 10;                    //
  console.log(x);                // 10
  console.log(a);                // 8
  var f = function(a, b, c) {    // 
    b = a;                       // 
    console.log(b);              // 8
    b = c;                       // 
    var x = 5;                   //
  }                              //
  f(a,b,c);                      // 
  console.log(b);                // 9
}                                //
c(8,9,10);                       //
console.log(b);                  // 10
console.log(x);                  // 1
```

```javascript
console.log(bar);                         // undefined
console.log(baz);                         // undefined
foo();                                    //
function foo() { console.log('Hola!'); }  //
var bar = 1;                              //
baz = 2;                                  //
```

```javascript
var instructor = "Tony";                  //
if(true) {                                //
    var instructor = "Franco";            //
}                                         //
console.log(instructor);                  // "Franco"
```

```javascript
var instructor = "Tony";                  //
console.log(instructor);                  // "Tony"
(function() {                             //
   if(true) {                             //
      var instructor = "Franco";          //
      console.log(instructor);            // "Franco"
   }                                      //
})();                                     //
console.log(instructor);                  // "Tony"
```

```javascript
var instructor = "Tony";                  // 
let pm = "Franco";                        //
if (true) {                               //
    var instructor = "The Flash";         //
    let pm = "Reverse Flash";             //
    console.log(instructor);              // "The Flash"
    console.log(pm);                      //  "Reverse Flash"
}                                         //
console.log(instructor);                  // "The Flash"
console.log(pm);                          // "Franco"
```
### Coerción de Datos

¿Cuál crees que será el resultado de la ejecución de estas operaciones?:

```javascript
6 / "3"           // 2
"2" * "3"         // "6"
4 + 5 + "px"      // 9"px"
"$" + 4 + 5       // "$45"
"4" - 2           // "2"
"4px" - 2         // "2px"  --- es NaN, lo hice mal, cierto que el primero es un string y no un numero como para poder restarlo al siguiente numero!
7 / 0             // infinity
{}[0]             // es [0]
parseInt("09")    // 09
5 && 2            // 2
2 && 5            // 5
5 || 0            // 5
0 || 5            // 5 
[3]+[3]-[10]      // [-4] -- [23], me volvi a equivocar, el 3 se concatena con el tres, lo cual forma 33, y ese 33 se resta con 10, lo que da 23
3>2>1             // false
[] == ![]         // true
```

> Si te quedó alguna duda repasá con [este artículo](http://javascript.info/tutorial/object-conversion).


### Hoisting

¿Cuál es el output o salida en consola luego de ejecutar este código? Explicar por qué:

```javascript
function test() {         // 
   console.log(a);        // undefined, porque el hoisting sube la declaracion de variable pero no su valor.
   console.log(foo());    // 2, el hoisting sube la funcion asi que este retorna lo que la funcion pide.
                          //
   var a = 1;             //
   function foo() {       //
      return 2;           //
   }                      //
}                         //
                          //
test();                   // 
```

Y el de este código? :

```javascript
var snack = 'Meow Mix';             // 
                                    //
function getFood(food) {            //
    if (food) {                     //
        var snack = 'Friskies';     // 
        return snack;               // "Friskies"
    }                               //
    return snack;                   // "Friskies"
}                                   //
                                    //
getFood(false);                     // al ser false no retornaria nada, si fuera true retorna lo escrito arriba
```


### This

¿Cuál es el output o salida en consola luego de ejecutar esté código? Explicar por qué:

```javascript
var fullname = 'Juan Perez';           // 
var obj = {                            // 
   fullname: 'Natalia Nerea',          // 
   prop: {                             // 
      fullname: 'Aurelio De Rosa',     // 
      getFullname: function() {        // 
         return this.fullname;         // 
      }                                //
   }                                   //
};                                     //

console.log(obj.prop.getFullname());   // "Aurelio De Rosa"
                                       //
var test = obj.prop.getFullname;       // 
                                       //
console.log(test());                   // imagino que tambien retorna "Aurelio De Rosa" -- me volvi a equivocar, en realidad retorna "Juan Perez" investigar por qué...
```

### Event loop

Considerando el siguiente código, ¿Cuál sería el orden en el que se muestra por consola? ¿Por qué?

```javascript
function printing() {                                 //
   console.log(1);                                    //
   setTimeout(function() { console.log(2); }, 1000);  // 
   setTimeout(function() { console.log(3); }, 0);     //
   console.log(4);                                    //
}                                                     //
                                                      //
printing();                                           // 1, 3, 4, 2
```
